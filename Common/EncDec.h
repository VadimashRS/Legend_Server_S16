#ifndef ENC_DEC_H
#define ENC_DEC_H

enum
{
	ENCODE_DECODE_KEY_1,
	ENCODE_DECODE_KEY_2,
	ENCODE_DECODE_SERIAL,
	ENCODE_DECODE_SIZE
};

#define MAX_KEY_1					8
#define MAX_KEY_2					8

static const uint8 key_1[MAX_KEY_1] = { 0x75, 0x99, 0x5C, 0xBA, 0x44, 0x2C, 0x87, 0x66 };
static const uint8 key_2[MAX_KEY_2] = { 0xF3, 0xB3, 0x64, 0x36, 0xBE, 0xF6, 0x52, 0x01 };

static const uint8 key_final[MAX_KEY_1][MAX_KEY_2] = 
{
	0x22, 0x8F, 0x3B, 0x0A, 0x8E, 0x6A, 0x51, 0x32,
	0xBA, 0xCC, 0xAA, 0xBF, 0xFB, 0x54, 0x24, 0x47,
	0x00, 0xA1, 0x21, 0x02, 0x02, 0x21, 0xAB, 0x9F,
	0xFE, 0x3A, 0xB0, 0x86, 0xBA, 0xAF, 0x34, 0x55,
	0xCB, 0x63, 0x8D, 0xEA, 0x56, 0xE8, 0x51, 0x29,
	0x7D, 0x2B, 0x5F, 0xC3, 0xB1, 0xE9, 0x8A, 0xFB,
	0xBC, 0x89, 0x9F, 0xB2, 0xE7, 0x23, 0xA8, 0x3A,
	0x6D, 0xFF, 0x5C, 0x58, 0x8B, 0x25, 0xAF, 0x62
};

class EncodeDecode
{
	public:
		EncodeDecode(): SerialSEND(0), SerialRECV(0), LastKey1(-1), LastKey2(-1)
		{
			this->SetLastKey1(-1);
			this->SetLastKey2(-1);
		}

		bool Encode(const uint8 * source, uint8 * encoded, uint16 & size);
		bool EncodeDS(const uint8 * source, uint8 * encoded, uint16 & size);
		bool Decode(uint8 * source, uint8 * decoded, uint16 & size, uint8 & serial);
		bool GetKey1(uint8 key, uint8 & position);
		bool GetKey2(uint8 key, uint8 & position);

		DECLARE_ENUM(uint8, LastKey1);
		DECLARE_ENUM(uint8, LastKey2);

		uint8 SerialSEND;
		uint8 SerialRECV;
		int32 LastKey1;
		int32 LastKey2;
};

#endif