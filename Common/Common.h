#ifndef COMMON_COMMON_H
#define COMMON_COMMON_H

#  pragma warning(disable:4996)                             // 'function': was declared deprecated
#ifndef __SHOW_STUPID_WARNINGS__
#  pragma warning(disable:4244)                             // 'argument' : conversion from 'type1' to 'type2', possible loss of data
#  pragma warning(disable:4355)                             // 'this' : used in base member initializer list
#endif                                                      // __SHOW_STUPID_WARNINGS__

#if PLATFORM == PLATFORM_WINDOWS
#define STRCASECMP stricmp
#else
#define STRCASECMP strcasecmp
#endif

#  if !defined (FD_SETSIZE)
#    define FD_SETSIZE 4096
#  endif

#if COMPILER == COMPILER_MICROSOFT

#define I32FMT "%08I32X"
#define I64FMT "%016I64X"
#if _MSC_VER < 1900
#define snprintf _snprintf
#endif
#define atoll __atoi64
#define vsnprintf _vsnprintf
#define finite(X) _finite(X)
#define llabs _abs64

#else

#define stricmp strcasecmp
#define strnicmp strncasecmp
#define I32FMT "%08X"
#define I64FMT "%016llX"

#endif

#define CHECK_RANGE(x, y) (((x) < 0)? false:((x) >= (y)) ? false: true)

//#define READ_BLOCK_SIZE 4096
#define READ_BLOCK_SIZE 8192
#define MAX_BUFFER_SIZE 4096

#define STRING_SAFE(name, size) \
	char name[size]; \
	memset(name, 0, size);

#define STRING_SAFE_COPY(name, size, src, count) \
	STRING_SAFE(name, size) \
	memcpy(name, src, count);
	
#define POINTER_PCT(type, name, packet, position) type * name = (type*)&packet[position]
#define POINTER_PCT_LOG(type, name, packet, position) \
	type * name = (type*)&packet[position]; \
	LOG_WRONG_PACKET(name->h.get_size(), type, packet);

#define POINTER_PCT_CHECK(type, name, packet, position) \
	type * name = (type*)&packet[position]; \
	LOG_WRONG_PACKET(name->GetSize(), type, packet);

#define LOG_WRONG_PACKET(incoming, current, packet) \
	if ( incoming != sizeof(current) ) \
		sLog->outPacket(LOG_DEFAULT, packet, incoming, "Wrong Incoming Packet Size (Incoming: %d / Current: %d) at :%s ", \
			incoming, sizeof(current), __FUNCTION__);

#define POINTER_PCT_RETURN(type, name, packet, position) \
	type * name = (type*)&packet[position];

//#define POINTER_PCT_RETURN_R(type, name, packet, position, res) \
//	type * name = (type*)&packet[position];

#define POINTER_PCT_RETURN_R(type, name, packet, position, res) \
	type * name = (type*)&packet[position]; \
	if ( name->h.get_size() != sizeof(type) ) {\
		sLog->outError(LOG_DEFAULT, "Wrong Incoming Packet Size (Incoming: %d / Current: %d) at :%s", \
			name->h.get_size(), sizeof(type), __FUNCTION__); return res; }

#define GET_PACKET_SIZE(head, body, count) (sizeof(head) + (count * sizeof(body)))

#define MAX_QUERY_LEN 32*1024

#define ARG(DEST, SOURCE) \
	char DEST[2048]; \
	::memset(DEST, 0, sizeof(DEST)); \
	va_list pArguments; \
	va_start(pArguments, SOURCE); \
	vsprintf_s(DEST, SOURCE, pArguments); \
	va_end(pArguments);

#define ARG_FILE(file, source) \
	va_list ap; \
	va_start(ap, source); \
	vfprintf(file, source, ap); \
	fprintf(file, "\n"); \
	va_end(ap);

#define SCAST(type, x) static_cast<type>(x)
#define cast(type, x) static_cast<type>(x)

#define QueryCallBackProcess(query, function) \
	if ( QueryCallBackReady(query) ) \
		function(query.get());

#define QueryCallBackReady(query) \
	query.valid() && query.wait_for(std::chrono::seconds(0)) == std::future_status::ready

#define CLEAR_LIST(list) for (auto itr = list.begin(); itr != list.end(); ++itr) { SAFE_DELETE(*itr); } list.clear();
#define CLEAR_MAP(map) for (auto itr = map.begin(); itr != map.end(); ++itr) { SAFE_DELETE(itr->second); } map.clear();

#define LIST_CLEAR(list_it, list) \
	for ( list_it clear_list = list.begin(); clear_list != list.end(); ++clear_list ) {\
		SAFE_DELETE(*clear_list); }\
	list.clear();	

#define MAP_CLEAR(list_it, list) \
	for ( list_it clear_list = list.begin(); clear_list != list.end(); ++clear_list ) { \
		SAFE_DELETE(clear_list->second); }\
	list.clear();	

#define limitmin(data, limit) \
	if ( data < limit ) \
	{ \
		data = limit; \
	}

#define limitmax(data, limit) \
	if ( data > limit ) \
	{ \
		data = limit; \
	}

#define LIMIT(data, min, max) \
	limitmin(data, min); \
	limitmax(data, max);

#define INDEX_DATA(name) \
	uint8 m_prop##name[2]; \
	uint16 Get##name() { return INDEX_GET(this->m_prop##name); } \
	uint16 Get##name() const { return INDEX_GET(this->m_prop##name); } \
	void Set##name(uint16 value) { INDEX_SET(this->m_prop##name, value); }

#define INDEX_SET(index, data) \
	index[0] = SET_NUMBERH(data); \
	index[1] = SET_NUMBERL(data);

#define INDEX_GET(index) \
	MAKE_NUMBERW(index[0], index[1]);

#define GET_MAX_WORD_VALUE(x) (((x)>65000)?65000:((uint16)(x)))

#if _MSC_VER < 1900
#define snprintf _snprintf
#endif
#define vsnprintf _vsnprintf
#define finite(X) _finite(X)

#define UI64FMTD "%" PRIu64
#define UI64LIT(N) UINT64_C(N)

#define atol(a) strtoul( a, NULL, 10)

#define TIME_GET(x) time_t x = time(NULL);

#define MAKE_SUBCODE(subcode, packet) \
	uint8 subcode = packet[3]; \
	if ( packet[0] == 0xC2 || packet[0] == 0xC4 ) \
		subcode = packet[4];

enum TimeConstants
{
    MINUTE = 60,
    HOUR   = MINUTE * 60,
    DAY    = HOUR * 24,
    WEEK   = DAY * 7,
    MONTH  = DAY * 30,
    YEAR   = MONTH * 12,
    IN_MILLISECONDS = 1000
};

enum DayOfWeekConstants
{
	SUNDAY = 0,
	MONDAY = 1,
	TUESDAY = 2,
	WEDNESDAY = 3,
	THURSDAY = 4,
	FRIDAY = 5,
	SATURDAY = 6,
};

// we always use stdlibc++ std::max/std::min, undefine some not C++ standard defines (Win API and some pother platforms)
#ifdef max
#  undef max
#endif

#ifdef min
#  undef min
#endif

#define SAFE_DELETE(p) if(p != nullptr){delete p; p = nullptr;}
#define SAFE_DELETE_ARRAY(p) if((p)!=nullptr){delete[] (p);(p)=nullptr;}

#define MAX_ACCOUNT_IP_LENGTH			16
#define MAX_ACCOUNT_MAC_LENGTH			17

#define MAX_ACCOUNT_LENGTH				10
#define MAX_PASSWORD_LENGTH				20

#define ENCRYPTED_PASSWORD_LENGTH		40

#define MAX_CHARACTER_LENGTH			10
#define MAX_SECURE_CODE_LENGTH			12

#define MAX_CHARACTER_PER_ACCOUNT		10

#define MAX_PREVIEW_DATA				20

#define MAX_GUILD_NAME_LENGTH			8
#define MAX_GUILD_EMBLEM_LENGTH			32
#define MAX_GUILD_NOTICE_LENGTH			60
#define MAX_GUILD_MEMBER				80
#define PERSONAL_STORE_NAME_LENGTH		44
#define PERSONAL_STORE_SEARCH_ITEM_LENGTH 64
#define PERSONAL_STORE_SEARCH_MAX		50
#define PERSONAL_STORE_BUNDLE_MAX		5
#define PERSONAL_STORE_SELL_MAX			20
#define MAX_MAIL_SUBJECT_LENGTH			60
#define MAX_CHAT_LENGTH					100
#define MAX_SERVER_PER_GROUP			20

#define warehouse_size						240
#define expanded_warehouse_start			120
#define expanded_warehouse_end				warehouse_size
#define warehouse_range(x)					(((x)<0)?false:((x)>warehouse_size-1)?false:true )
#define expanded_warehouse_range(x)			(((x)<expanded_warehouse_start)?false:((x)>expanded_warehouse_end-1)?false:true )
#define warehouse_loop(var)					for ( uint8 var = 0; var < warehouse_size; ++var )

enum
{
	expanded_warehouse_disabled = 0,
	expanded_warehouse_enabled = 1,
	expanded_warehouse_expired = 2,
};

enum
{
	GUILD_RANK_MASTER						= 0x80,
	GUILD_RANK_ASISTANT						= 0x40,
	GUILD_RANK_BATTLE_MASTER				= 0x20,
	GUILD_RANK_NORMAL						= 0x00,
	GUILD_RANK_NONE							= 0xFF,
};

#ifdef DOUBLEVEC_T
typedef double vec_t;
#else
typedef float vec_t;
#endif
typedef vec_t vec3_t[3];

enum
{
	LOGIN_RESULT_WRONG_PASSWORD,
	LOGIN_RESULT_SUCCESS,
	LOGIN_RESULT_WRONG_ACCOUNT,
	LOGIN_RESULT_ONLINE,
	LOGIN_RESULT_MAX_USER,
	LOGIN_RESULT_BANNED,
	LOGIN_RESULT_WRONG_SERIAL,
	LOGIN_RESULT_ERROR,
	LOGIN_RESULT_THREE_TIMES,
};

enum
{
	CHARACTER_CREATE_RESULT_ERROR					= 0,
	CHARACTER_CREATE_RESULT_SUCCESS					= 1,
	CHARACTER_CREATE_RESULT_UNKNOWN					= 2,
	CHARACTER_CREATE_RESULT_CANT_MORE				= 3,

	CHARACTER_DELETE_RESULT_ERROR					= 0,
	CHARACTER_DELETE_RESULT_SUCCESS					= 1,
	CHARACTER_DELETE_RESULT_WRONG_SECURITY_CODE		= 2,
};

enum PACKET_HEADCODE_DEF
{
	HEADCODE_MOVE = 0xD7,
	HEADCODE_POSITION_SET = 0x10,
	HEADCODE_ATTACK_NORMAL = 0xDF,
	HEADCODE_ATTACK_MULTI_TARGET = 0xD3,

	HEADCODE_CHARACTER_JOIN_SUCCESS = 0x03,

	HEADCODE_CONNECT_SERVER = 0xF4,
		SUBCODE_CONNECT_SERVER_SERVER_SELECT = 0x03,
		SUBCODE_CONNECT_SERVER_SERVER_LIST = 0x06,

	HEADCODE_ACCOUNT_DATA = 0xF1,
		SUBCODE_ACCOUNT_DATA_LOGIN_SEND = 0x00,
		SUBCODE_ACCOUNT_DATA_LOGIN = 0x01,
		SUBCODE_ACCOUNT_DATA_LOGOUT = 0x02,

	HEADCODE_MISC_CHARACTER_DATA = 0xF3,
		SUBCODE_MISC_CHARACTER_DATA_LIST = 0x00,
		SUBCODE_MISC_CHARACTER_DATA_CREATE = 0x01,
		SUBCODE_MISC_CHARACTER_DATA_DELETE = 0x02,
		SUBCODE_MISC_CHARACTER_DATA_JOIN = 0x03,
		SUBCODE_MISC_CHARACTER_DATA_RESPAWN = 0x04,
		SUBCODE_MISC_CHARACTER_DATA_NORMAL_LEVEL_UP = 0x05,
		SUBCODE_MISC_CHARACTER_DATA_POINT_ADD = 0x06,
		SUBCODE_MISC_CHARACTER_DATA_LIFE_SHIELD_REDUCE = 0x07,
		SUBCODE_MISC_CHARACTER_DATA_PK_LEVEL = 0x08,
		SUBCODE_MISC_CHARACTER_DATA_ITEM = 0x10,
		SUBCODE_MISC_CHARACTER_DATA_SKILL = 0x11,
		SUBCODE_MISC_CHARACTER_DATA_LOAD_CONFIRM = 0x12,
		SUBCODE_MISC_CHARACTER_DATA_PREVIEW = 0x13,
		SUBCODE_MISC_CHARACTER_DATA_INVENTORY_LIST = 0x14,
		SUBCODE_MISC_CHARACTER_DATA_NAME_CHECK = 0x15,
		SUBCODE_MISC_CHARACTER_DATA_UNKNOWN_1 = 0x16,
		SUBCODE_MISC_CHARACTER_DATA_SUMMONED_HP = 0x20,
		SUBCODE_MISC_CHARACTER_DATA_UNKNOWN_2 = 0x22,
		SUBCODE_MISC_CHARACTER_DATA_UNKNOWN_3 = 0x23,
		SUBCODE_MISC_CHARACTER_DATA_UNKNOWN_4 = 0x24,
		SUBCODE_MISC_CHARACTER_DATA_UNKNOWN_5 = 0x25,
		SUBCODE_MISC_CHARACTER_DATA_EVENT_NOTICE = 0x26,
		SUBCODE_MISC_CHARACTER_DATA_GAME_OPTION = 0x30,
		SUBCODE_MISC_CHARACTER_DATA_NEW_SKILL_INFO = 0x34,
		SUBCODE_MISC_CHARACTER_DATA_NEW_SKILL_VIEW = 0x35,
		SUBCODE_MISC_CHARACTER_DATA_COMMAND = 0x40,
		SUBCODE_MISC_CHARACTER_DATA_MASTER_STATUS = 0x50,
		SUBCODE_MISC_CHARACTER_DATA_MASTER_LEVEL_UP = 0x51,
		SUBCODE_MISC_CHARACTER_DATA_MASTER_SKILL_POINT_ADD = 0x52,
		SUBCODE_MISC_CHARACTER_DATA_MASTER_SKILL = 0x53,
		SUBCODE_MISC_CHARACTER_DATA_SWITCH_SCROLL = 0x60,
		SUBCODE_MISC_CHARACTER_DATA_CASH_SHOP_DATE = 165,
		SUBCODE_MISC_CHARACTER_DATA_ACCELERATOR = 172,
		SUBCODE_MISC_CHARACTER_DATA_SHOP_PRICE = 174,
		SUBCODE_MISC_CHARACTER_DATA_POWER_DATA = 175,
		SUBCODE_MISC_CHARACTER_DATA_CUSTOM_MESSAGE = 176,
		SUBCODE_MISC_CHARACTER_DATA_CONFIG_FLAGS = 177,
		SUBCODE_MISC_CHARACTER_DATA_PLAY_SOUND = 179,
		SUBCODE_MISC_CHARACTER_DATA_BATTLEZONE_LIST = 180,
		SUBCODE_MISC_CHARACTER_DATA_EXPANDED_WAREHOUSE = 184,
		SUBCODE_MISC_CHARACTER_DATA_CLIENT_OFFSET = 186,
		SUBCODE_MISC_CHARACTER_DATA_HACK_REPORT = 187,
		SUBCODE_MISC_CHARACTER_DATA_MONSTER_CUSTOM_DATA = 189,
		SUBCODE_MISC_CHARACTER_DATA_ATTACK_SPEED = 190,
		SUBCODE_MISC_CHARACTER_DATA_HACK_CHECK_PING = 191,
		SUBCODE_MISC_CHARACTER_DATA_HACK_CHECK_BYTE_MODIFIED = 192,
		SUBCODE_MISC_CHARACTER_DATA_HACK_CHECK_DOUBLE_MODIFIED = 193,
		SUBCODE_MISC_CHARACTER_DATA_HACK_CHECK_HOOKED_FUNCTION = 194,
		SUBCODE_MISC_CHARACTER_DATA_HACK_CHECK_FRAME_COUNT = 195,
		SUBCODE_MISC_CHARACTER_DATA_HACK_CHECK_LOOP_PING = 196,
		SUBCODE_MISC_CHARACTER_DATA_HACK_CHECK_ADD_OFFSET = 197,
		SUBCODE_MISC_CHARACTER_DATA_MISC_SHOP = 198,
		SUBCODE_MISC_CHARACTER_DATA_SCAN_PROCESS = 199,
		SUBCODE_MISC_CHARACTER_DATA_MESSAGE_BOX = 200,
		SUBCODE_MISC_CHARACTER_DATA_FPS_OFFSET = 201,
		SUBCODE_MISC_CHARACTER_DATA_CHEAT_SCAN_DETECT = 202,
		SUBCODE_MISC_CHARACTER_DATA_MINIMIZE = 203,
		SUBCODE_MISC_CHARACTER_DATA_ANTI_MACRO = 204,
		
	HEADCODE_CHAT = 0x00,
	HEADCODE_TEXT_SAY = 0x01,
	HEADCODE_WHISPER = 0x02,
	HEADCODE_CHARACTER_READY = 0x03,
	HEADCODE_SKILL_STATE = 0x07,

	HEADCODE_EVENT_STATE = 0x0B,
	HEADCODE_SERVER_MESSAGE = 0x0C,
	HEADCODE_NOTICE = 0x0D,
	HEADCODE_TIME_CHECK = 0x0E,
	HEADCODE_WEATHER = 0x0F,

	HEADCODE_VIEWPORT_PLAYER = 0x12,
	HEADCODE_VIEWPORT_MONSTER = 0x13,
	HEADCODE_VIEWPORT_DESTROY_COMPLETE = 0x14,
	HEADCODE_DIE = 0x17,
	HEADCODE_ACTION = 0x18,
	HEADCODE_NORMAL_MAGIC_ATTACK = 0x19,
	HEADCODE_CANCEL_MAGIC = 0x1B,
	HEADCODE_TELEPORT = 0x1C,
	HEADCODE_DURATION_MAGIC_ATTACK = 0x1E,
	HEADCODE_VIEWPORT_MONSTER_SUMMON = 0x1F,

	HEADCODE_VIEWPORT_ITEM = 0x20,
	HEADCODE_VIEWPORT_ITEM_DESTROY = 0x21,
	HEADCODE_ITEM_GET = 0x22,
	HEADCODE_ZEN = 0x22,
	HEADCODE_ITEM_DROP = 0x23,
	HEADCODE_ITEM_MOVE = 0x24,
	HEADCODE_EQUIPMENT = 0x25,
	HEADCODE_ITEM_USE = 0x26,
	HEADCODE_REFILL_HP_SHIELD = 0x26,
	HEADCODE_REFILL_MANA_STAMINA = 0x27,
	HEADCODE_INVENTORY_LIST = 0x28,
	HEADCODE_SPECIAL_ITEM_USE = 0x29,
	HEADCODE_ITEM_DURABILITY = 0x2A,
	HEADCODE_EXPANDED_NOTIFY = 0x2B,
	HEADCODE_STAT_FRUIT = 0x2C,
	HEADCODE_BUFF = 0x2D,
	HEADCODE_PARTY_BUFF = 0x2E,

	HEADCODE_NPC_TALK = 0x30,
	HEADCODE_CLOSE_INTERFACE = 0x31,
	HEADCODE_ITEM_BUY = 0x32,
	HEADCODE_ITEM_SELL = 0x33,
	HEADCODE_ITEM_REPAIR = 0x34,
	HEADCODE_ITEM_DISASSEMBLE = 0x35,

	HEADCODE_TRADE_REQUEST = 0x36,
	HEADCODE_TRADE_ANSWER = 0x37,
	HEADCODE_TRADE_ITEM_DELETE = 0x38,
	HEADCODE_TRADE_ITEM_ADD = 0x39,
	HEADCODE_TRADE_MONEY = 0x3A,
	HEADCODE_TRADE_ZEN = 0x3B,
	HEADCODE_TRADE_OK = 0x3C,
	HEADCODE_TRADE_CANCEL = 0x3D,
	HEADCODE_MISC_EVENT = 0x3E,
	HEADCODE_PARTY_REQUEST = 0x40,
	HEADCODE_PARTY_ANSWER = 0x41,
	HEADCODE_PARTY_LIST = 0x42,
	HEADCODE_PARTY_DELETE = 0x43,
	HEADCODE_PARTY_LIFE = 0x44,
	HEADCODE_VIEWPORT_PLAYER_CHANGE = 0x45,
	HEADCODE_WORLD_ATTRIBUTE = 0x46,
	HEADCODE_PARTY_ITEM = 0x47,
	HEADCODE_EFFECT = 0x48,

	HEADCODE_EVOMON_SCORE = 0x49,

	HEADCODE_SKILL_NEW = 0x4A,
	HEADCODE_SKILL_DARK_SIDE = 0x4B,

	HEADCODE_MINING_SYSTEM = 0x4C,

	HEADCODE_GREMORY_CASE = 0x4F,
		SUBCODE_GREMORY_CASE_ITEM_LIST = 0x00,
		SUBCODE_GREMORY_CASE_ITEM_ADD = 0x01,
		SUBCODE_GREMORY_CASE_ITEM_USE = 0x02,
		SUBCODE_GREMORY_CASE_ITEM_REMOVE = 0x03,
		SUBCODE_GREMORY_CASE_NOTIFY = 0x04,
		SUBCODE_GREMORY_CASE_OPEN = 0x05,


	HEADCODE_GUILD_REQUEST = 0x50,
	HEADCODE_GUILD_ANSWER = 0x51,
	HEADCODE_GUILD_LIST_ALL = 0x52,
	HEADCODE_GUILD_MEMBER_DEL = 0x53,
	HEADCODE_GUILD_NPC_ANSWER = 0x54,
	HEADCODE_GUILD_CREATE = 0x55,
	HEADCODE_GUILD_CREATE_RESULT = 0x56,
	HEADCODE_GUILD_VIEWPORT_DEL = 0x5D,

	HEADCODE_GUILD_WAR_REQUEST = 0x60,
	HEADCODE_GUILD_WAR = 0x61,
	HEADCODE_GUILD_WAR_START = 0x62,
	HEADCODE_GUILD_WAR_END = 0x63,
	HEADCODE_GUILD_WAR_SCORE = 0x64,
	HEADCODE_GUILD_UPDATE_COMPLETE = 0x65,
	HEADCODE_GUILD_UPDATE_VIEWPORT = 0x66,
	HEADCODE_GUILD_UPDATE_VIEWPORT_COMPLETE = 0x67,
	HEADCODE_CASTLE_MACHINE_VIEWPORT = 0x68,
	HEADCODE_SPECIAL_SKILL = 0x69,

	HEADCODE_NIXIES_LAKE = 0x76,
		SUBCODE_NIXIES_LAKE_ENTER = 0x01,
		SUBCODE_NIXIES_LAKE_ENTER_CONFIRM = 0x02,
		SUBCODE_NIXIES_LAKE_MEMBER_ENTER = 0x03,
		SUBCODE_NIXIES_LAKE_MEMBER_NOTIFY = 0x04,
		SUBCODE_NIXIES_LAKE_SINGLE_ICE_ATTACK = 0x05,
		SUBCODE_NIXIES_LAKE_MAGIC_CIRCLE = 0x06,
		SUBCODE_NIXIES_LAKE_ICE_BREATH = 0x07,
		SUBCODE_NIXIES_LAKE_LEAVE = 0x09,
		SUBCODE_NIXIES_LAKE_SINGLE_ICE_EFFECT = 0x10,
		SUBCODE_BOSS_UNK1 = 0x11,
		SUBCODE_SWAMP_OF_DARKNESS_BOSS_ENTER = 0x21,
		SUBCODE_SWAMP_OF_DARKNESS_BOSS_ATTACK = 0x22,
		SUBCODE_SWAMP_OF_DARKNESS_BOSS_WATER_MONSTER = 0x23,
		SUBCODE_SWAMP_OF_DARKNESS_BOSS_TIMER = 0x24,
		SUBCODE_SWAMP_OF_DARKNESS_BOSS_AREA = 0x25,
		
	HEADCODE_LABYRINTH_OF_DIMENSIONS = 0x77,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_ENTRANCE = 0x00,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_ZONE_ENTER = 0x01,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_MISSION = 0x03,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_GATE = 0x04,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_GATE_ENTER = 0x05,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_MISSION_FINAL_LIST = 0x06,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_MISSION_FINAL = 0x07,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_NEXT_LEVEL = 0x11,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_STAGE_RESULT = 0x14,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_STAGE_DATA = 0x15,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_MISSION_FAIL = 0x16,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_TIMER = 0x17,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_ENTRANCE_LAYER = 0x18,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_LEAVE = 0x20,
		SUBCODE_LABYRINTH_OF_DIMENSIONS_LEVEL_LIST = 0x21,

	HEADCODE_PC_ROOM = 0x79,
		SUBCODE_PC_ROOM_OPEN = 0x00,
		SUBCODE_PC_ROOM_VALUE = 0x01,

	HEADCODE_MAJESTIC_SKILL_TREE = 0x7E,
		SUBCODE_MAJESTIC_SKILL_TREE_ADD = 0x01,
		SUBCODE_MAJESTIC_SKILL_TREE_LIST = 0x02,
		SUBCODE_MAJESTIC_SKILL_TREE_DATA = 0x03,
		SUBCODE_MAJESTIC_SKILL_TREE_STAT_ADD = 0x05,
		SUBCODE_MAJESTIC_SKILL_TREE_STAT_LIST = 0x06,
		SUBCODE_MAJESTIC_SKILL_TREE_PASSIVE_ADD = 0x07,
		
	HEADCODE_WAREHOUSE_MONEY = 0x81,
	HEADCODE_WAREHOUSE_CLOSE = 0x82,
	HEADCODE_WAREHOUSE_PASSWORD = 0x83,

	HEADCODE_MIX_BUTTON = 0x86,
	HEADCODE_MIX_CLOSE = 0x87,
	HEADCODE_MASS_COMBINATION = 0x88,
	HEADCODE_MOVE_REQUEST = 0x8E,

	HEADCODE_DEVIL_SQUARE_ENTER_REQUEST = 0x90,
	HEADCODE_EVENT_REMAIN_TIME_REQUEST = 0x91,
	HEADCODE_EVENT_MESSAGE = 0x92,
	HEADCODE_BLOOD_CASTLE_SCORE = 0x93,
	HEADCODE_BLOOD_CASTLE_ENTER_REQUEST = 0x9A,
	HEADCODE_BLOOD_CASTLE_STATE = 0x9B,
	HEADCODE_KILL_EXPERIENCE = 0x9C,
	HEADCODE_EVENT_ENTER_COUNT = 0x9F,

	HEADCODE_QUEST_EVOLUTION_INFO = 0xA0,
	HEADCODE_QUEST_EVOLUTION_SET_STATE_REQUEST = 0xA1,
	HEADCODE_QUEST_EVOLUTION_SET_STATE = 0xA2,
	HEADCODE_QUEST_EVOLUTION_PRICE = 0xA3,
	HEADCODE_QUEST_EVOLUTION_MONSTER_SKILL = 0xA4,
	HEADCODE_QUEST_TIMER = 0xA5,

	HEADCODE_PET_COMMAND = 0xA7,
	HEADCODE_PET_ATTACK_COMMAND = 0xA8,
	HEADCODE_PET_INFO = 0xA9,

	HEADCODE_DUEL = 0xAA,
		SUBCODE_DUEL_START_REQUEST = 0x01,
		SUBCODE_DUEL_START_ANSWER = 0x02,
		SUBCODE_DUEL_END = 0x03,
		SUBCODE_DUEL_SCORE = 0x04,
		SUBCODE_DUEL_LIFEBAR_UPDATE = 0x05,
		SUBCODE_DUEL_STATUS = 0x06,
		SUBCODE_DUEL_LIFEBAR_INIT = 0x07,
		SUBCODE_DUEL_SPECTATOR_ADD = 0x08,
		SUBCODE_DUEL_UNK_09 = 0x09,
		SUBCODE_DUEL_SPECTATOR_DEL = 0x0A,
		SUBCODE_DUEL_SPECTATOR_LIST = 0x0B,
		SUBCODE_DUEL_END_WINNER = 0x0C,
		SUBCODE_DUEL_UNK_0D = 0x0D,
	
	HEADCODE_HELPER_SETTINGS_SAVE = 0xAE,
	HEADCODE_CHAOS_CASTLE = 0xAF,
		SUBCODE_CHAOS_CASTLE_ENTER_REQUEST = 0x01,
		SUBCODE_CHAOS_CASTLE_REPOSITION = 0x02,
		SUBCODE_CHAOS_CASTLE_SURVIVAL_DATA = 0x03,
		SUBCODE_CHAOS_CASTLE_SURVIVAL_ENTER = 0x05,
		SUBCODE_CHAOS_CASTLE_SURVIVAL_POSITION = 0x06,
		SUBCODE_CHAOS_CASTLE_SURVIVAL_RANKING = 0x07,
		SUBCODE_CHAOS_CASTLE_SURVIVAL_CLOSE = 0x08,
		SUBCODE_CHAOS_CASTLE_SURVIVAL_SCORE = 0x09,

	HEADCODE_TELEPORT_TARGET = 0xB0,

	HEADCODE_SERVER_MOVE = 0xB1,
		SUBCODE_SERVER_MOVE_REQUEST = 0x00,
		SUBCODE_SERVER_MOVE_RESULT = 0x01,

	HEADCODE_CASTLE_SIEGE = 0xB2,
		SUBCODE_CASTLE_SIEGE_STATE = 0x00,
		SUBCODE_CASTLE_SIEGE_REGISTER_GUILD = 0x01,
		SUBCODE_CASTLE_SIEGE_GIVEUP_GUILD = 0x02,
		SUBCODE_CASTLE_SIEGE_REGISTER_GUILD_INFO = 0x03,
		SUBCODE_CASTLE_SIEGE_REGISTER_MARK = 0x04,
		SUBCODE_CASTLE_SIEGE_NPC_BUY = 0x05,
		SUBCODE_CASTLE_SIEGE_NPC_REPAIR = 0x06,
		SUBCODE_CASTLE_SIEGE_NPC_UPGRADE = 0x07,
		SUBCODE_CASTLE_SIEGE_TAX_MONEY_INFO = 0x08,
		SUBCODE_CASTLE_SIEGE_TAX_RATE_INFO = 0x09,
		SUBCODE_CASTLE_SIEGE_MONEY_OUT = 0x10,
		SUBCODE_CASTLE_SIEGE_GATE_STATE = 0x11,
		SUBCODE_CASTLE_SIEGE_GATE_OPERATE = 0x12,
		SUBCODE_CASTLE_SIEGE_GATE_OPERATE_STATE = 0x13,
		SUBCODE_CASTLE_SIEGE_SWITCH_STATE = 0x14,
		SUBCODE_CASTLE_SIEGE_CROWN_ACCESS = 0x15,
		SUBCODE_CASTLE_SIEGE_CROWN_STATE = 0x16,
		SUBCODE_CASTLE_SIEGE_START_STATE = 0x17,
		SUBCODE_CASTLE_SIEGE_NOTIFY_PROGRESS = 0x18,
		SUBCODE_CASTLE_SIEGE_JOIN_SIDE = 0x19,
		SUBCODE_CASTLE_SIEGE_TAX_RATE = 0x1A,
		SUBCODE_CASTLE_SIEGE_MINI_MAP = 0x1B,
		SUBCODE_CASTLE_SIEGE_MINI_MAP_CLOSE = 0x1C,
		SUBCODE_CASTLE_SIEGE_COMMAND_REQUEST = 0x1D,
		SUBCODE_CASTLE_SIEGE_REMAIN_TIME = 0x1E,
		SUBCODE_CASTLE_SIEGE_ENABLE_HUNT = 0x1F,
		SUBCODE_CASTLE_SIEGE_SWITCH_INFO = 0x20,

	HEADCODE_CASTLE_SIEGE_NPC_LIST = 0xB3,
	HEADCODE_CASTLE_SIEGE_GUILD_REGISTER_LIST = 0xB4,
	HEADCODE_CASTLE_SIEGE_GUILD_LIST = 0xB5,
	HEADCODE_CASTLE_SIEGE_MINI_MAP_SINGLE = 0xB6,
	HEADCODE_CASTLE_SIEGE_MACHINE = 0xB7,
		SUBCODE_CASTLE_SIEGE_MACHINE_INTERFACE = 0x00,
		SUBCODE_CASTLE_SIEGE_MACHINE_USE = 0x01,
		SUBCODE_CASTLE_SIEGE_MACHINE_NOTIFY_REGION = 0x02,
		SUBCODE_CASTLE_SIEGE_MACHINE_NOTIFY_TARGET = 0x03,
		SUBCODE_CASTLE_SIEGE_MACHINE_DAMAGE_VALUE = 0x04,

	HEADCODE_KILL_COUNT = 0xB8,

	HEADCODE_CASTLE_SIEGE_MISC = 0xB9,
		SUBCODE_CASTLE_SIEGE_MISC_LIFE_STONE_STATE = 0x01,
		SUBCODE_CASTLE_SIEGE_MISC_OWNER_MARK = 0x02,
		SUBCODE_CASTLE_SIEGE_MISC_LAND_OF_TRIAL_GUARD = 0x03,

	HEADCODE_SKILL_CAST = 0xBA,
	HEADCODE_CASTLE_SIEGE_MINI_MAP = 0xBB,

	HEADCODE_JEWEL_MIX = 0xBC,
		SUBCODE_JEWEL_MIX = 0x00,
		SUBCODE_JEWEL_UNMIX = 0x01,

	HEADCODE_CRYWOLF = 0xBD,
		SUBCODE_CRYWOLF_STATE_INFO = 0x00,
		SUBCODE_CRYWOLF_ALTAR_STATUE = 0x02,
		SUBCODE_CRYWOLF_CONTRACT = 0x03,
		SUBCODE_CRYWOLF_TIME_LEFT = 0x04,
		SUBCODE_CRYWOLF_MONSTER_INFO = 0x05,
		SUBCODE_CRYWOLF_PERSONAL_RANK = 0x07,
		SUBCODE_CRYWOLF_HERO_LIST = 0x08,
		SUBCODE_CRYWOLF_PLUS = 0x09,
		SUBCODE_CRYWOLF_ATTACK_REGION = 0x0C,

	HEADCODE_EVENT_MISC = 0xBF,
		SUBCODE_ILLUSION_TEMPLE_ENTER = 0x00,
		SUBCODE_CHAIN_LIGHTNING = 0x0A,
		SUBCODE_DOUBLE_GOER_ENTER = 0x0E,
		SUBCODE_DOUBLE_GOER_MONSTER_POSITION = 0x0F,
		SUBCODE_DOUBLE_GOER_TIMER_INIT = 0x10,
		SUBCODE_DOUBLE_GOER_BOSS_POSITION = 0x11,
		SUBCODE_DOUBLE_GOER_PLAYER_POSITION = 0x12,
		SUBCODE_DOUBLE_GOER_END = 0x13,
		SUBCODE_DOUBLE_GOER_MONSTER_PASSED = 0x14,
		SUBCODE_LOREN_MARKET_TELEPORT = 0x17,
		SUBCODE_CHAIN_SKILL = 0x18,
		SUBCODE_INVENTORY_ITEM_USE = 0x20,
		SUBCODE_HELPER_OPEN = 0x51,
		SUBCODE_PARTY_HELPER = 0x52,
		SUBCODE_PARTY_SUMMON = 0x54,
		SUBCODE_PARTY_MOVE = 0x56,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_ENTER = 0x5A,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_ENTER_CONFIRM = 0x5B,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_5C = 0x5C,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_5D = 0x5D,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_5E = 0x5E,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_60 = 0x60,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_61 = 0x61,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_62 = 0x62,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_63 = 0x63,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_64 = 0x64,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_67 = 0x67,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_68 = 0x68,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_69 = 0x69,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_6A = 0x6A,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_6C = 0x6C,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_70 = 0x70,
		SUBCODE_ILLUSION_TEMPLE_CHAMPIONSHIP_71 = 0x71,

		SUBCODE_HELPER_PLUS_80 = 0x80,
		SUBCODE_HELPER_PLUS_81 = 0x81,
		SUBCODE_HELPER_PLUS_82 = 0x82,
		SUBCODE_HELPER_PLUS_83 = 0x83,
		SUBCODE_HELPER_PLUS_RUN_SEND = 0x84,
		SUBCODE_HELPER_PLUS_RUN = 0x85,
		SUBCODE_HELPER_PLUS_86 = 0x86,
		SUBCODE_HELPER_PLUS_88 = 0x88,
		SUBCODE_HELPER_PLUS_90 = 0x90,

	HEADCODE_FRIEND_LIST_SEND = 0xC0,
	HEADCODE_FRIEND_ADD = 0xC1,

	HEADCODE_FRIEND_DEL = 0xC3,
	HEADCODE_FRIEND_STATE = 0xC4,
	HEADCODE_FRIEND_MAIL = 0xC5,
	HEADCODE_FRIEND_MAIL_LIST_SEND = 0xC6,
	HEADCODE_FRIEND_MAIL_READ = 0xC7,
	HEADCODE_FRIEND_MAIL_DELETE = 0xC8,
	HEADCODE_FRIEND_MAIL_LIST = 0xC9,
	HEADCODE_CHAT_ROOM_CREATE = 0xCA,
	HEADCODE_CHAT_ROOM_INVITATION = 0xCB,

	HEADCODE_BATTLE_CORE = 0xCD,
		SUBCODE_BATTLE_CORE_CHARACTER_INFO = 0x01,
		SUBCODE_BATTLE_CORE_QUEUE = 0x02,
		SUBCODE_BATTLE_CORE_GREMORY_CASE_OPEN = 0x06,
		SUBCODE_BATTLE_CORE_LEAVE_QUEUE = 0x07,
		SUBCODE_BATTLE_CORE_GET_REAL_NAME = 0x08,

	HEADCODE_NPC_INTERACTION = 0xD0,
		SUBCODE_NPC_INTERACTION_WEREWOLF = 0x07,
		SUBCODE_NPC_INTERACTION_GATE_KEEPER = 0x08,
		SUBCODE_NPC_INTERACTION_SNOWMAN = 0x0A,
		SUBCODE_NPC_INTERACTION_SANTA_CLAUS = 0x10,
		SUBCODE_NPC_INTERACTION_RUUD_BUY = 0xF0,
		SUBCODE_NPC_INTERACTION_RUUD_SEND = 0xF1,
		SUBCODE_NPC_INTERACTION_OPEN_BOX = 0xF2,

	HEADCODE_KANTURU = 0xD1,
		SUBCODE_KANTURU_NOTIFY_ENTRANCE = 0x00,
		SUBCODE_KANTURU_ENTER = 0x01,
		SUBCODE_KANTURU_STATUS = 0x02,
		SUBCODE_KANTURU_STATUS_CHANGE = 0x03,
		SUBCODE_KANTURU_RESULT = 0x04,
		SUBCODE_KANTURU_TIME = 0x05,
		SUBCODE_KANTURU_WIDE_ATTACK = 0x06,
		SUBCODE_KANTURU_M_AND_P_COUNT = 0x07,

	HEADCODE_CASH_SHOP = 0xD2,
		SUBCODE_CASH_SHOP_COIN = 0x01,
		SUBCODE_CASH_SHOP_OPEN = 0x02,
		SUBCODE_CASH_SHOP_ITEM_BUY = 0x03,
		SUBCODE_CASH_SHOP_ITEM_GIFT = 0x04,
		SUBCODE_CASH_SHOP_ITEM_LIST = 0x05,
		SUBCODE_CASH_SHOP_ITEM_LIST_PAGE = 0x06,
		SUBCODE_CASH_SHOP_ITEM_USE = 0x0B,
		SUBCODE_CASH_SHOP_DATE_ITEM = 0x0C,
		SUBCODE_CASH_SHOP_ITEM_LIST_DATA_2 = 0x0D,
		SUBCODE_CASH_SHOP_ITEM_LIST_DATA_1 = 0x0E,
		SUBCODE_CASH_SHOP_ITEM_USE_NEW = 0x0F,
		SUBCODE_CASH_SHOP_ITEM_EXPIRE = 0x11,
		SUBCODE_CASH_SHOP_ITEM_EXPIRE_DATA = 0x12,
		SUBCODE_CASH_SHOP_DATE_BANNER = 0x15,
		SUBCODE_CASH_SHOP_CATEGORY = 0x16,
		SUBCODE_CASH_SHOP_PACKAGE = 0x17,
		SUBCODE_CASH_SHOP_PRODUCT = 0x18,

	HEADCODE_ELEMENTAL_DAMAGE = 0xD8,

	HEADCODE_TORMENTED_SQUARE_SURVIVAL = 0xDB,
		SUBCODE_TORMENTED_SQUARE_SURVIVAL_SCHEDULE = 0x00,
		SUBCODE_TORMENTED_SQUARE_SURVIVAL_ENTER_REQUEST = 0x01,
		SUBCODE_TORMENTED_SQUARE_SURVIVAL_ENTER_ACCEPT = 0x02,
		SUBCODE_TORMENTED_SQUARE_SURVIVAL_RANKING = 0x03,
		SUBCODE_TORMENTED_SQUARE_SURVIVAL_STATE = 0x04,
		SUBCODE_TORMENTED_SQUARE_SURVIVAL_TIME = 0x05,
		SUBCODE_TORMENTED_SQUARE_SURVIVAL_SCORE_RESULT = 0x06,
		SUBCODE_TORMENTED_SQUARE_SURVIVAL_TEAM_LIST = 0x07,

	HEADCODE_TORMENTED_SQUARE = 0xDD,
		SUBCODE_TORMENTED_SQUARE_ENTER = 0x01,
		SUBCODE_TORMENTED_SQUARE_QUEUE = 0x02,
		SUBCODE_TORMENTED_SQUARE_NOTIFICATION = 0x04,
		SUBCODE_TORMENTED_SQUARE_TIME = 0x05,
		SUBCODE_TORMENTED_SQUARE_FINAL_RANKING = 0x06,
		SUBCODE_TORMENTED_SQUARE_PLAY_RANKING = 0x07,
		SUBCODE_TORMENTED_SQUARE_GOBLIN = 0x08,

	HEADCODE_GUILD_ASSIGN_STATUS = 0xE1,
	HEADCODE_GUILD_ASSIGN_TYPE = 0xE2,

	HEADCODE_GUILD_RELATIONSHIP_REQUEST = 0xE5,
	HEADCODE_GUILD_RELATIONSHIP_ANSWER = 0xE6,

	HEADCODE_GUILD_RELATIONSHIP_LIST = 0xE9,
	HEADCODE_GUILD_ALLIANCE_KICK = 0xEB,

	HEADCODE_QUEST_SUPPORT = 0xF6,

		SUBCODE_QUEST_SUPPORT_BUFF = 0x31,

		SUBCODE_QUEST_GUIDED_OBJECTIVE = 0x50,
		SUBCODE_QUEST_GUIDED_COMPLETE = 0x51,
		SUBCODE_QUEST_GUIDED_GIVE_UP = 0x52,
		SUBCODE_QUEST_GUIDED_GIVE_UP_CHAPTER = 0x53,
		SUBCODE_QUEST_GUIDED_WARP = 0x54,
		SUBCODE_QUEST_GUIDED_REACH_TARGET = 0x55,
		SUBCODE_QUEST_GUIDED_START_MOVING = 0x56,

		SUBCODE_QUEST_UNK_57 = 0x57,

		SUBCODE_QUEST_UNK_6F = 0x6F,
		SUBCODE_QUEST_MU_STATUS = 0x70,
		SUBCODE_QUEST_MU_NPC_TALK = 0x71,
		SUBCODE_QUEST_MU_ACCEPT = 0x72,
		SUBCODE_QUEST_MU_GIVE_UP = 0x73,
		SUBCODE_QUEST_MU_COMPLETE = 0x74,
		SUBCODE_QUEST_MU_OBJECTIVE_UPDATE = 0x75,
		SUBCODE_QUEST_MU_REACH_TARGET = 0x76,
		SUBCODE_QUEST_MU_INFO = 0x77,
		SUBCODE_QUEST_MU_MOVE = 0x7A,
		SUBCODE_QUEST_UNK_7B = 0x7B,
		SUBCODE_QUEST_MU_CLICK_COMPLETED = 0x7D,
		SUBCODE_QUEST_MU_CANT_MOVE = 0x81,
		SUBCODE_QUEST_UNK_82 = 0x82,
		SUBCODE_QUEST_UNK_83 = 0x83,

	HEADCODE_IMPERIAL_FORTRESS = 0xF7,
		SUBCODE_IMPERIAL_FORTRESS_ENTER = 0x01,
		SUBCODE_IMPERIAL_FORTRESS_ENTER_RESULT = 0x02,
		SUBCODE_IMPERIAL_FORTRESS_TIMER = 0x04,
		SUBCODE_IMPERIAL_FORTRESS_FINISH = 0x06,

	HEADCODE_GEN_SYSTEM = 0xF8,
		SUBCODE_GEN_SYSTEM_JOIN = 0x01,
		SUBCODE_GEN_SYSTEM_JOIN_RESULT = 0x02,
		SUBCODE_GEN_SYSTEM_DELETE = 0x03,
		SUBCODE_GEN_SYSTEM_DELETE_RESULT = 0x04,
		SUBCODE_GEN_SYSTEM_VIEWPORT = 0x05,
		SUBCODE_GEN_SYSTEM_STATUS = 0x07,
		SUBCODE_GEN_SYSTEM_REWARD = 0x09,
		SUBCODE_GEN_SYSTEM_REWARD_RESULT = 0x0A,
		SUBCODE_GEN_SYSTEM_INFO = 0x0B,

		SUBCODE_WARP_ACHERON = 0x20,
		SUBCODE_WARP_ACHERON_RESULT = 0x21,
		SUBCODE_ARKA_WAR_MASTER_REGISTER = 0x30,
		SUBCODE_ARKA_WAR_MASTER_REGISTER_RESULT = 0x31,
		SUBCODE_ARKA_WAR_MEMBER_REGISTER = 0x32,
		SUBCODE_ARKA_WAR_MEMBER_REGISTER_RESULT = 0x33,
		SUBCODE_ARKA_WAR_ENTER = 0x34,
		SUBCODE_ARKA_WAR_ENTER_RESULT = 0x35,
		SUBCODE_ARKA_WAR_OPEN_TROPHY_EXCHANGE = 0x36,
		SUBCODE_ARKA_WAR_OBELISK_INFO = 0x37,
		SUBCODE_ARKA_WAR_STATE = 0x38,
		SUBCODE_ARKA_WAR_PLAYING_INFO = 0x39,
		SUBCODE_ARKA_WAR_OBELISK_STATE = 0x3A,
		SUBCODE_ARKA_WAR_RESULT = 0x3B,
		SUBCODE_ARKA_WAR_OCCUPY_ZONE = 0x3D,
		SUBCODE_ARKA_WAR_OBELISK_LIFE = 0x3F,
		SUBCODE_ARKA_WAR_JOIN_CANCEL = 0x40,
		SUBCODE_ARKA_WAR_VIEW_GUILD_MEMBER = 0x41,
		SUBCODE_ARKA_WAR_VIEW_GUILD_MEMBER_RESULT = 0x42,
		SUBCODE_ARKA_WAR_SIGN_OF_LORD_REGISTER = 0x43,
		SUBCODE_ARKA_WAR_SIGN_OF_LORD_SEND = 0x44,
		SUBCODE_ARKA_WAR_SIGN_OF_LORD_CHECK = 0x45,
		SUBCODE_ARKA_WAR_SIGN_OF_LORD_CHECK_RESULT = 0x46,
		SUBCODE_ARKA_WAR_SIGN_OF_LORD_REGISTER_RESULT = 0x47,
		SUBCODE_ARKA_WAR_PLAYER_POSITION = 0x48,
		SUBCODE_ARKA_WAR_OBELISK_GUILD_STATE = 0x49,
		SUBCODE_ARKA_WAR_NOTIFY_TEXT = 0x4A,

		SUBCODE_ENTER_AS_THE_PROTECTOR_OF_ACHERON = 0x4B,

	HEADCODE_QUEST_SUPPORT_NPC_TALK = 0xF9,

	CLIENT_CONNECT_CUSTOM_HEADER = 0xFA,
};

#define ITEM_OPERATOR	1171
#define MAKE_ITEM(x, y) ((x * 512) + y + ITEM_OPERATOR)

enum PLAYER_WARDROBE
{
	WEAPON_01,
	WEAPON_02,
	HELM,
	ARMOR,
	PANTS,
	GLOVES,
	BOOTS,
	WINGS,
	GUARDIAN,
	PENDANT,
	RING_01,
	RING_02,
	PLAYER_MAX_EQUIPMENT,
	PENTAGRAM_SLOT = 236,
	EARRING_01 = 237,
	EARRING_02 = 238
};

enum CharacterStatID
{
	STAT_ATTACK_DAMAGE_MIN = 0,
	STAT_ATTACK_DAMAGE_MAX = 1,
	STAT_ATTACK_RATE = 2,
	STAT_ATTACK_RATE_PVP = 3,
	STAT_ATTACK_SPEED = 4,
	STAT_MAGIC_SPEED = 5,
	STAT_DEFENSE = 6,
	STAT_DEFENSE_RATE = 7,
	STAT_DEFENSE_RATE_PVP = 8,
	STAT_MAGIC_DAMAGE_MIN = 9,
	STAT_MAGIC_DAMAGE_MAX = 10,
	STAT_CURSE_DAMAGE_MIN = 11,
	STAT_CURSE_DAMAGE_MAX = 12,
	STAT_ELEMENTAL_DEFENSE = 13,
	STAT_ELEMENTAL_DAMAGE_MIN = 14,
	STAT_ELEMENTAL_DAMAGE_MAX = 15,
	STAT_ELEMENTAL_ATTACK_SUCCESS_RATE = 16,
	STAT_ELEMENTAL_DEFENSE_SUCCESS_RATE = 17,
	STAT_FENRIR_DAMAGE = 18,
	STAT_COMBO_DAMAGE = 19,

	MAX_CHARACTER_STAT_ID
};

#define MAX_DUEL_ROOM			4
#define MAX_DUEL_SPECTATORS		10

#define DUEL_ROOM_RANGE(x) (x >= 0 && x < MAX_DUEL_ROOM ? true : false)

#define PLAYER_HELPER_MAX_ITEMS				25
#define HELPER_ITEM_LENGTH					16
#define MAIL_SUBJECT_LENGTH					32
#define MAIL_MESSAGE_LENGTH					1000
#define SKILL_KEY_COUNT						10
#define BUTTON_KEY_COUNT					5

enum CloseType
{
	CLOSE_FLAG_NONE = -1,
	CLOSE_FLAG_EXIT_GAME,
	CLOSE_FLAG_SELECT_CHAR,
	CLOSE_FLAG_SELECT_SERVER,
	MAX_CLOSE_FLAG
};

enum EventStateId
{
	EVENT_STATE_NONE,
	EVENT_STATE_RED_DRAGON = 1,
	EVENT_STATE_TAMAJJANG = 2,
	EVENT_STATE_GOLDEN_DRAGON = 3,
	EVENT_STATE_MAX
};

enum ObjectType
{
	OBJECT_TYPE_NONE,
	OBJECT_TYPE_PLAYER,
	OBJECT_TYPE_MONSTER,
	OBJECT_TYPE_WORLD_ITEM,
};

enum MainObjectType
{
	MAIN_OBJECT_NONE			= -1,
	MAIN_OBJECT_PLAYER			= 1 << 0,
	MAIN_OBJECT_MONSTER			= 1 << 1,
	MAIN_OBJECT_NPC				= 1 << 2,
	MAIN_OBJECT_TRAP			= 1 << 3,
	MAIN_OBJECT_UNKNOWN_1		= 1 << 4,
	MAIN_OBJECT_FRIENDLY_TARGET	= 1 << 5,
	MAIN_OBJECT_UNKNOWN_3		= 1 << 6,
	MAIN_OBJECT_FURNITURE		= 1 << 7,
};

enum Powers
{
	POWER_LIFE,
	POWER_MANA,
	POWER_SHIELD,
	POWER_STAMINA,
	POWER_MAX
};

#define POWER_LOOP(loop) for ( int32 loop = 0; loop < POWER_MAX; ++loop )

enum StatType
{
	STRENGTH,
	AGILITY,
	VITALITY,
	ENERGY,
	LEADERSHIP,
	MAX_STAT_TYPE
};

static const char* StatName[MAX_STAT_TYPE] = {"Strength", "Agility", "Vitality", "Energy", "Leadership"};

enum AcceleratorAction
{
	ACCELERATOR_ACTION_NONE,
	ACCELERATOR_ACTION_KICK			= 1 << 0,
	ACCELERATOR_ACTION_RESTART		= 1 << 1,
	ACCELERATOR_ACTION_BAN			= 1 << 2,
};

enum AdminPanelFlag
{
	ADMIN_PANEL_FLAG_VISIBLE		= 1 << 0,
	ADMIN_PANEL_BEEN_ATTACKED		= 1 << 1,
	ADMIN_PANEL_ATTACK				= 1 << 2,
	ADMIN_PANEL_WHISPER				= 1 << 3,
	ADMIN_PANEL_GLOBAL_NAME			= 1 << 4,
};

enum ItemBox
{
	ITEM_BOX_NONE				= 0,
	ITEM_BOX_INVENTORY			= 1,
	ITEM_BOX_WAREHOUSE			= 2,
	ITEM_BOX_MUUN				= 8,
	ITEM_BOX_EVENT_INVENTORY	= 9,
	ITEM_BOX_GREMORY_CASE_INV	= 10,
	ITEM_BOX_GREMORY_CASE_ACC	= 11,
	ITEM_BOX_SELL_NPC			= 12,
	ITEM_BOX_MIX_RECOVERY		= 13,
	ITEM_BOX_GREMORY_CASE_MOBILE = 14,
	ITEM_BOX_GREMORY_CASE_PS = 15,
	ITEM_BOX_PERSONAL_STORE = 16,
};

enum CustomMessageID
{
	CUSTOM_MESSAGE_ID_NONE,
	CUSTOM_MESSAGE_ID_NORMAL,
	CUSTOM_MESSAGE_ID_WHISPER,
	CUSTOM_MESSAGE_ID_BLUE,
	CUSTOM_MESSAGE_ID_RED,
	CUSTOM_MESSAGE_ID_PARTY,
	CUSTOM_MESSAGE_ID_GUILD,
	CUSTOM_MESSAGE_ID_ALLIANCE,
	CUSTOM_MESSAGE_ID_ADMIN_NORMAL,
	CUSTOM_MESSAGE_ID_GENS,
	CUSTOM_MESSAGE_ID_POST,

	CUSTOM_MESSAGE_ID_MAX
};

enum
{
	DB_CLASS_DARK_WIZARD			= 0x00,
	DB_CLASS_SOUL_MASTER			= 0x01,
	DB_CLASS_GRAND_MASTER			= 0x03,
	DB_CLASS_SOUL_WIZARD			= 0x07,

	DB_CLASS_DARK_KNIGHT			= 0x10,
	DB_CLASS_BLADE_KNIGHT			= 0x11,
	DB_CLASS_BLADE_MASTER			= 0x13,
	DB_CLASS_DRAGON_KNIGHT			= 0x17,

	DB_CLASS_FAIRY_ELF				= 0x20,
	DB_CLASS_MUSE_ELF				= 0x21,
	DB_CLASS_HIGH_ELF				= 0x23,
	DB_CLASS_NOBLE_ELF				= 0x27,

	DB_CLASS_MAGIC_GLADIATOR		= 0x30,
	DB_CLASS_DUEL_MASTER			= 0x33,
	DB_CLASS_MAGIC_KNIGHT			= 0x37,

	DB_CLASS_DARK_LORD				= 0x40,
	DB_CLASS_LORD_EMPEROR			= 0x43,
	DB_CLASS_EMPIRE_LORD			= 0x47,

	DB_CLASS_SUMMONER				= 0x50,
	DB_CLASS_BLOODY_SUMMONER		= 0x51,
	DB_CLASS_DIMENSION_MASTER		= 0x53,
	DB_CLASS_DIMENSIONER			= 0x57,

	DB_CLASS_RAGE_FIGHTER			= 0x60,
	DB_CLASS_FIST_MASTER			= 0x63,
	DB_CLASS_FIST_BLASER			= 0x67,

	DB_CLASS_GROW_LANCER			= 0x70,
	DB_CLASS_MIRAGE_LANCER			= 0x73,
	DB_CLASS_SHINING_LANCER			= 0x77,

	DB_CLASS_RUNE_WIZARD 			= 0x80,
	DB_CLASS_RUNE_SPELL_MASTER 		= 0x81,
	DB_CLASS_GRAND_RUNE_MASTER 		= 0x83,
	DB_CLASS_MAJESTIC_RUNE_WIZARD 	= 0x87,

	DB_CLASS_SLAYER 				= 0x90,
	DB_CLASS_ROYAL_SLAYER 			= 0x91,
	DB_CLASS_MASTER_SLAYER 			= 0x93,
	DB_CLASS_SLAUGHTERER 			= 0x97,

	DB_CLASS_GUN_CRUSHER 			= 0xA0,
	DB_CLASS_GUN_BRAKER				= 0xA1,
	DB_CLASS_MASTER_GUN_BREAKER		= 0xA3,
	DB_CLASS_HEIST_GUN_CRUSHER		= 0xA7,
};

namespace Character
{
	enum
	{
		DARK_WIZARD,
		DARK_KNIGHT,
		FAIRY_ELF,
		MAGIC_GLADIATOR,
		DARK_LORD,
		SUMMONER,
		RAGE_FIGHTER,
		GROW_LANCER,
		RUNE_WIZARD,
		SLAYER,
		GUN_CRUSHER,
		MAX_CLASS
	};

	inline bool Allowed(uint8 race)
	{
		return ( race == DB_CLASS_DARK_WIZARD 		||
				 race == DB_CLASS_DARK_KNIGHT 		||
				 race == DB_CLASS_FAIRY_ELF 		||
				 race == DB_CLASS_MAGIC_GLADIATOR 	||
				 race == DB_CLASS_DARK_LORD 		||
				 race == DB_CLASS_SUMMONER 			||
				 race == DB_CLASS_RAGE_FIGHTER 		||
				 race == DB_CLASS_GROW_LANCER 		||
				 race == DB_CLASS_RUNE_WIZARD 		||
				 race == DB_CLASS_SLAYER 			||
				 race == DB_CLASS_GUN_CRUSHER );
	}

	inline bool AllowedDB(uint8 const race)
	{
		return ( race == DB_CLASS_DARK_WIZARD		|| race == DB_CLASS_SOUL_MASTER			|| race == DB_CLASS_GRAND_MASTER 		|| race == DB_CLASS_SOUL_WIZARD 			||
				 race == DB_CLASS_DARK_KNIGHT		|| race == DB_CLASS_BLADE_KNIGHT		|| race == DB_CLASS_BLADE_MASTER 		|| race == DB_CLASS_DRAGON_KNIGHT 			||
				 race == DB_CLASS_FAIRY_ELF			|| race == DB_CLASS_MUSE_ELF			|| race == DB_CLASS_HIGH_ELF 			|| race == DB_CLASS_NOBLE_ELF 				||
				 race == DB_CLASS_MAGIC_GLADIATOR	|| race == DB_CLASS_DUEL_MASTER			|| race == DB_CLASS_MAGIC_KNIGHT 		||
				 race == DB_CLASS_DARK_LORD			|| race == DB_CLASS_LORD_EMPEROR		|| race == DB_CLASS_EMPIRE_LORD 		||
				 race == DB_CLASS_SUMMONER			|| race == DB_CLASS_BLOODY_SUMMONER		|| race == DB_CLASS_DIMENSION_MASTER 	|| race == DB_CLASS_DIMENSIONER 			||
				 race == DB_CLASS_RAGE_FIGHTER		|| race == DB_CLASS_FIST_MASTER			|| race == DB_CLASS_FIST_BLASER 		||
				 race == DB_CLASS_GROW_LANCER		|| race == DB_CLASS_MIRAGE_LANCER		|| race == DB_CLASS_SHINING_LANCER 		||
				 race == DB_CLASS_RUNE_WIZARD 		|| race == DB_CLASS_RUNE_SPELL_MASTER 	|| race == DB_CLASS_GRAND_RUNE_MASTER 	|| race == DB_CLASS_MAJESTIC_RUNE_WIZARD 	||
				 race == DB_CLASS_SLAYER 			|| race == DB_CLASS_ROYAL_SLAYER 		|| race == DB_CLASS_MASTER_SLAYER 		|| race == DB_CLASS_SLAUGHTERER 			||
				 race == DB_CLASS_GUN_CRUSHER 		|| race == DB_CLASS_GUN_BRAKER 			|| race == DB_CLASS_MASTER_GUN_BREAKER 	|| race == DB_CLASS_HEIST_GUN_CRUSHER);
	}
}

static const char * CharacterToName[Character::MAX_CLASS] =
{
	"Dark Wizard",
	"Dark Knight",
	"Fairy Elf",
	"Magic Gladiator",
	"Dark Lord",
	"Summoner",
	"Rage Fighter",
	"Grow Lancer",
	"Rune Wizard",
	"Slayer",
	"Gun Crusher"
};

static uint8 CharacterToDB[Character::MAX_CLASS] =
{
	DB_CLASS_DARK_WIZARD,
	DB_CLASS_DARK_KNIGHT,
	DB_CLASS_FAIRY_ELF,
	DB_CLASS_MAGIC_GLADIATOR,
	DB_CLASS_DARK_LORD,
	DB_CLASS_SUMMONER,
	DB_CLASS_RAGE_FIGHTER,
	DB_CLASS_GROW_LANCER,
	DB_CLASS_RUNE_WIZARD,
	DB_CLASS_SLAYER,
	DB_CLASS_GUN_CRUSHER,
};

enum
{
	move_item_inventory,
	move_item_trade,
	move_item_warehouse,
	move_item_chaos_machine,
	move_item_personal_shop,
	move_item_pet_trainer,
	move_item_gemstone_purify,
	move_item_smelting_stone,
	move_item_remove_harmony,
	move_item_chaos_card,
	move_item_cherry_blossom,
	move_item_socket_mix_1,
	move_item_socket_mix_2,
	move_item_socket_mix_3,
	move_item_socket_mix_4,
	move_item_lucky_ticket,
	move_item_lucky_set,
	move_item_17,
	move_item_18,
	move_item_19,
	move_item_arca_war_register_sign,
	move_item_event_inventory,
	move_item_muun_inventory,
	max_move_item_flag
};

enum
{
	GUILD_RELATIONSHIP_OPERATION_JOIN		= 0x01,
	GUILD_RELATIONSHIP_OPERATION_BREAKOFF	= 0x02,
};

enum
{
	GUILD_RELATIONSHIP_NONE					= 0x00,
	GUILD_RELATIONSHIP_UNION				= 0x01,
	GUILD_RELATIONSHIP_RIVAL				= 0x02,
	GUILD_RELATIONSHIP_UNIONMASTER			= 0x04,
	GUILD_RELATIONSHIP_RIVALMASTER			= 0x08,
};

enum AuthorityCodes
{
	AUTHORITY_CODE_NORMAL,
	AUTHORITY_CODE_BANNED,
	AUTHORITY_CODE_ADMINISTRATOR,
};

enum
{
	EVENT_NOTIFICATION_CHAOS_CASTLE		= 1,
	EVENT_NOTIFICATION_BLOOD_CASTLE		= 2,
	EVENT_NOTIFICATION_DEVIL_SQUARE		= 3,
	EVENT_NOTIFICATION_ILLUSION_TEMPLE	= 6,
	EVENT_NOTIFICATION_DOPPELGANGER		= 7,

	EVENT_NOTIFICATION_MAX,
};

enum
{
	SERVER_TYPE_PVP,
	SERVER_TYPE_NO_PVP,
	SERVER_TYPE_GOLDEN_PVP,
	SERVER_TYPE_GOLDEN_NO_PVP,
};

#define MAX_SUBTYPE_ITEMS			512
#define ITEMGET(x,y)				cast(uint16, (x)*MAX_SUBTYPE_ITEMS + (y))

#define GUILD_MATCHING_TEXT_LENGTH	40

#endif