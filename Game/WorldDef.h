#ifndef WORLD_DEF_H
#define WORLD_DEF_H

#define MAX_WORLD_ITEM			300
#define MAX_WORLD_VIEWPORT_ITEM	50
#define MAX_WORLD_STATUS		3

#define VIEWPORT_ITEM_LOOP(loop) for ( int32 loop = 0; loop < MAX_WORLD_VIEWPORT_ITEM; ++loop )

enum WorldItemState
{
	WORLD_ITEM_STATE_NONE,
	WORLD_ITEM_STATE_STANDBY,
	WORLD_ITEM_STATE_READY,
	WORLD_ITEM_STATE_DELETE,
};

#define WORLD_HEIGHT		256
#define WORLD_WIDTH			256
#define MAX_WORLD_NAME_LENGTH		64

#define WORLD_MAKE_GRID(x, y) (y * WORLD_WIDTH + x)
#define WORLD_MAX_SIZE		WORLD_WIDTH * WORLD_HEIGHT

#define IS_COORDINATE_RANGE(coord)	(coord < 0 ? false : coord >= 256 ? false : true)
#define PATH_TABLE_RANGE(index)		(index < 0 ? false : index >= 16 ? false : true)

enum WorldFlags
{
	WORLD_FLAG_NONE							= 0,
	WORLD_FLAG_BATTLE_ZONE					= 1 << 0,
	WORLD_FLAG_ALLOW_EXCHANGE				= 1 << 1,
	WORLD_FLAG_ALLOW_OFFLINE_TRADE			= 1 << 2,
	WORLD_FLAG_ALLOW_DUEL					= 1 << 3,
	WORLD_FLAG_ALLOW_PARTY					= 1 << 4,
	WORLD_FLAG_ALLOW_KALIMA_GATE			= 1 << 5,
	WORLD_FLAG_ALLOW_TALISMAN_MOVE			= 1 << 6,
	WORLD_FLAG_DISABLE_CASH_SHOP			= 1 << 7,
	WORLD_FLAG_NO_LEVEL_CHECK				= 1 << 8,
	//WORLD_FLAG_ALLOW_PK_HOSTIL				= 1 << 9,
	//WORLD_FLAG_ALLOW_PK_PENALTY				= 1 << 10,
	WORLD_FLAG_NO_FRUSTRUM					= 1 << 11,
	WORLD_FLAG_ALLOW_SUMMON					= 1 << 12,
	WORLD_FLAG_ALLOW_GUILD_COMMAND			= 1 << 13,
	WORLD_FLAG_ALLOW_HELPER					= 1 << 14,
	WORLD_FLAG_ALLOW_ENTER_CHAOS_CASTLE		= 1 << 15,
	WORLD_FLAG_ALLOW_SUMMON_MONSTER			= 1 << 16,
	WORLD_FLAG_ALLOW_AUTO_PET_CHANGE		= 1 << 17,
	WORLD_FLAG_ALLOW_PARTY_MOVE				= 1 << 18,
	WORLD_FLAG_ALLOW_PK_TIME				= 1 << 19,
	WORLD_FLAG_ALLOW_PK_MONSTER_KILL		= 1 << 20,
	WORLD_FLAG_ALLOW_PK_HELPER_KILL			= 1 << 21,
	WORLD_FLAG_ALLOW_GUILD_WAR				= 1 << 22,
	WORLD_FLAG_ALLOW_WRONG_LOCATION_CHECK	= 1 << 23,
	WORLD_FLAG_ALLOW_OFFLINE_ATTACK			= 1 << 24,
	WORLD_FLAG_ALLOW_SUMMON_SCROLL			= 1 << 26,
	WORLD_FLAG_NO_LIMIT_PK					= 1 << 27,
};

enum WorldBuffFlag
{
	WORLD_BUFF_FLAG_NONE				= 0,
	WORLD_BUFF_FLAG_REMOVE				= 1 << 0,
	WORLD_BUFF_FLAG_DISABLE				= 1 << 1,
};

enum WorldAreaFlag
{
	WORLD_AREA_FLAG_NONE				= 0,
	WORLD_AREA_FLAG_ITEM_DROP			= 1 << 0,
	WORLD_AREA_FLAG_MONSTER				= 1 << 1,
	WORLD_AREA_FLAG_PERSONAL_STORE		= 1 << 2,
	WORLD_AREA_FLAG_OFF_STORE			= 1 << 3,
};

enum
{
	WORLD_ATTRIBUTE_NONE	= 0,
	WORLD_ATTRIBUTE_SAFE	= 1 << 0,
	WORLD_ATTRIBUTE_STAND	= 1 << 1,
	WORLD_ATTRIBUTE_LOCK_1	= 1 << 2,
	WORLD_ATTRIBUTE_LOCK_2	= 1 << 3,
	WORLD_ATTRIBUTE_LOCK_3	= 1 << 4,
};

enum WorldNumber
{
	WORLD_LORENCIA = 0,
	WORLD_DUNGEON = 1,
	WORLD_DEVIAS = 2,
	WORLD_NORIA = 3,
	WORLD_LOSTTOWER = 4,
	WORLD_ATLANS = 7,
	WORLD_TARKAN = 8,
	WORLD_AIDA = 33,
	WORLD_ELBELAND = 51,

	WORLD_STADIUM = 6,

	WORLD_ICARUS = 10,

	WORLD_DEVIL_SQUARE_1 = 9,
	WORLD_DEVIL_SQUARE_2 = 9,
	WORLD_DEVIL_SQUARE_3 = 9,
	WORLD_DEVIL_SQUARE_4 = 9,
	WORLD_DEVIL_SQUARE_5 = 32,
	WORLD_DEVIL_SQUARE_6 = 32,
	WORLD_DEVIL_SQUARE_7 = 32,

	WORLD_BLOOD_CASTLE_1 = 11,
	WORLD_BLOOD_CASTLE_2 = 12,
	WORLD_BLOOD_CASTLE_3 = 13,
	WORLD_BLOOD_CASTLE_4 = 14,
	WORLD_BLOOD_CASTLE_5 = 15,
	WORLD_BLOOD_CASTLE_6 = 16,
	WORLD_BLOOD_CASTLE_7 = 17,
	WORLD_BLOOD_CASTLE_8 = 52,

	WORLD_CHAOS_CASTLE_1 = 18,
	WORLD_CHAOS_CASTLE_2 = 19,
	WORLD_CHAOS_CASTLE_3 = 20,
	WORLD_CHAOS_CASTLE_4 = 21,
	WORLD_CHAOS_CASTLE_5 = 22,
	WORLD_CHAOS_CASTLE_6 = 23,
	WORLD_CHAOS_CASTLE_7 = 53,

	WORLD_KALIMA_1 = 24,
	WORLD_KALIMA_2 = 25,
	WORLD_KALIMA_3 = 26,
	WORLD_KALIMA_4 = 27,
	WORLD_KALIMA_5 = 28,
	WORLD_KALIMA_6 = 29,
	WORLD_KALIMA_7 = 36,

	WORLD_ILLUSION_TEMPLE_1 = 45,
	WORLD_ILLUSION_TEMPLE_2 = 46,
	WORLD_ILLUSION_TEMPLE_3 = 47,
	WORLD_ILLUSION_TEMPLE_4 = 48,
	WORLD_ILLUSION_TEMPLE_5 = 49,
	WORLD_ILLUSION_TEMPLE_6 = 50,

	WORLD_CASTLE_SIEGE = 30,
	WORLD_LAND_OF_TRIALS = 31,

	WORLD_CRYWOLF_FIRST_ZONE = 34,
	WORLD_CRYWOLF_SECOND_ZONE = 35,

	WORLD_KANTURU = 37,
	WORLD_KANTURU_CORE = 38,
	WORLD_KANTURU_BOSS = 39,

	WORLD_SILENT = 40,
	WORLD_BALGASS_BARRACKS = 41,
	WORLD_BALGASS_REFUGE = 42,
	WORLD_SANTA_VILLAGE = 62,
	WORLD_VULCANUS = 63,
	WORLD_VULCANUS_ROOM = 64,
	
	WORLD_RAKLION = 57,
	WORLD_RAKLION_BOSS = 58,

	WORLD_SWAMP_OF_CALMNESS = 56,

	WORLD_IMPERIAL_FORTRESS_1 = 69,
	WORLD_IMPERIAL_FORTRESS_2 = 70,
	WORLD_IMPERIAL_FORTRESS_3 = 71,
	WORLD_IMPERIAL_FORTRESS_4 = 72,

	WORLD_LOREN_MARKET = 79,
	WORLD_EVENT_ZONE = 79,

	WORLD_DOPPELGANGER_1 = 82,
	WORLD_DOPPELGANGER_2 = 83,
	WORLD_DOPPELGANGER_3 = 84,
	WORLD_DOPPELGANGER_4 = 85,
	WORLD_DOPPELGANGER_5 = 86,
	WORLD_DOPPELGANGER_6 = 87,
	WORLD_DOPPELGANGER_7 = 88,
	WORLD_DOPPELGANGER_8 = 89,
	WORLD_DOPPELGANGER_9 = 90,

	WORLD_ACHERON = 91,
	WORLD_ACHERON_BATTLE = 92,
	WORLD_DEVENTER = 95,
	WORLD_DEVENTER_BATTLE = 96,
	WORLD_CHAOS_CASTLE_SURVIVAL = 97,
	WORLD_ILLUSION_TEMPLE_FINAL1 = 98,
	WORLD_ILLUSION_TEMPLE_FINAL2 = 99,

	WORLD_TORMENTED_SQUARE = 102,
	WORLD_TORMENTED_SQUARE_1 = 103,
	WORLD_TORMENTED_SQUARE_2 = 104,
	WORLD_TORMENTED_SQUARE_3 = 105,
	WORLD_TORMENTED_SQUARE_4 = 106,

	WORLD_URUK_MOUNTAIN = 100,
	WORLD_URUK_MOUNTAIN_BATTLE = 101,

	WORLD_NARS = 110,
	WORLD_FEREA = 112,

	WORLD_NIXIES_LAKE = 113,
	WORLD_LABYRINTH_OF_DIMENSIONS_SAFE = 114,
	WORLD_LABYRINTH_OF_DIMENSIONS_BATTLE = 115,

	WORLD_DEEP_DUNGEON_1 = 116,
	WORLD_DEEP_DUNGEON_2 = 117,
	WORLD_DEEP_DUNGEON_3 = 118,
	WORLD_DEEP_DUNGEON_4 = 119,
	WORLD_DEEP_DUNGEON_5 = 120,

	WORLD_LAST_MAN_STANDING = 200,
	
	WORLD_PLACE_OF_QUALIFICATION = 121,
	WORLD_SWAMP_OF_DARKNESS = 122,

	WORLD_KUBERA_MINE_1 = 123,
	WORLD_KUBERA_MINE_2 = 124,
	WORLD_KUBERA_MINE_3 = 125,
	WORLD_KUBERA_MINE_4 = 126,
	WORLD_KUBERA_MINE_5 = 127,

	WORLD_SCARLET_ICARUS = 132,

	WORLD_ARENA_GROUND_1 = 201,
	WORLD_ARENA_GROUND_2 = 202,
	WORLD_ARENA_GROUND_3 = 203,
	WORLD_ARENA_GROUND_4 = 204,
	WORLD_ARENA_GROUND_5 = 205,
	WORLD_ARENA_GROUND_6 = 206,
	
	WORLD_SPECIAL_EVENT_MAP = 207,
};

struct WorldGrid
{
	WorldGrid() { }
	WorldGrid(uint8 attribute): attribute(attribute) { }

	uint8 attribute;

	bool IsSafe() const { return this->attribute & WORLD_ATTRIBUTE_SAFE; }
	bool IsStand() const { return this->attribute & WORLD_ATTRIBUTE_STAND; }
	bool IsLocked_1() const { return this->attribute & WORLD_ATTRIBUTE_LOCK_1; }
	bool IsLocked_2() const { return this->attribute & WORLD_ATTRIBUTE_LOCK_2; }
	bool IsLocked_3() const { return this->attribute & WORLD_ATTRIBUTE_LOCK_3; }

	bool IsZenAllowed() const
	{
		if ( this->IsLocked_1() || this->IsLocked_2() )
			return false;

		return true;
	};

	bool IsDropAllowed() const
	{
		if ( this->IsLocked_1() || this->IsLocked_2() )
			return false;

		return true;
	}

	bool IsMoveAllowed() const
	{
		if ( this->IsLocked_1() || this->IsLocked_2() )
			return false;

		return true;
	}

	bool IsMonsterMoveAllowed() const
	{
		if ( this->IsSafe() || this->IsLocked_1() || this->IsLocked_2() )
			return false;

		return true;
	}

	bool IsSummonedMoveAllowed() const
	{
		if ( this->IsLocked_1() || this->IsLocked_2() )
			return false;

		return true;
	}
};

struct WorldBlockZone
{
	int16 x1;
	int16 y1;
	int16 x2;
	int16 y2;
};

#define URUK_MOUNTAIN_BLOCK_ZONE				6
#define URUK_MOUNTAIN_BLOCK_ATTRIBUTE			WORLD_ATTRIBUTE_LOCK_1

extern bool g_UrukMountainBlockStatus;

static const WorldBlockZone g_UrukMountainBlock[URUK_MOUNTAIN_BLOCK_ZONE] = 
{
	{ 0x77, 0x5D, 0x7A, 0x5F },
	{ 0x83, 0x5F, 0x86, 0x61 }, 
	{ 0x95, 0x6B, 0x97, 0x6E },
	{ 0x8C, 0x81, 0x8E, 0x84 },
	{ 0x7A, 0x80, 0x7C, 0x83 },
	{ 0x6E, 0x76, 0x70, 0x7A }
};

/*
0x6E 0x5D  0x97 0x84

110 96  149 137
*/

#define FEREA_BLOCK_ZONE				1
#define FEREA_BLOCK_ATTRIBUTE			WORLD_ATTRIBUTE_LOCK_1

extern bool g_FereaBlockStatus;

static const WorldBlockZone g_FereaBlock[FEREA_BLOCK_ZONE] = 
{
	{ 49, 121, 52, 124 }
};

#endif